# 1. Creates a new Kubernetes cluster on DigitalOcean, with NGINX ingress controller,
#    monitoring and Cert Manager pre-installed
# 2. Creates a DNS entry on Cloudflare pointed at the cluster's load balancer</li>

name: DigitalOcean

on:
  workflow_dispatch:
    inputs:
      k8s-cluster-name:
        description: 'Cluster name'
        required: true
      k8s-cluster-region:
        description: 'Cluster region (fra1/ams3)'
        required: true
        default: fra1
      k8s-cluster-version:
        description: 'Cluster version (1.25/1.26/1.27)'
        required: true
        default: '1.25'
      k8s-node-size:
        description: 'Node size (s-2vcpu-4gb/s-4vcpu-8gb/s-8vcpu-16gb)'
        required: true
        default: s-2vcpu-4gb
      k8s-node-count:
        description: 'Node count'
        required: true
        default: '3'

jobs:
  k8s-cluster:
    runs-on: ubuntu-latest
    environment: DigitalOcean
    steps:
      -
        name: Cache doctl
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/doctl
          key: doctl-${{ vars.DOCTL_VERSION }}
      -
        name: Install doctl
        run: |
          wget --quiet https://github.com/digitalocean/doctl/releases/download/v${{ vars.DOCTL_VERSION }}/doctl-${{ vars.DOCTL_VERSION }}-linux-amd64.tar.gz
          tar xf doctl-${{ vars.DOCTL_VERSION }}-linux-amd64.tar.gz
          mv doctl /usr/local/bin
          rm doctl-${{ vars.DOCTL_VERSION }}-linux-amd64.tar.gz
          doctl version
      -
        name: Create cluster
        run: |
          doctl auth init --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          doctl kubernetes cluster create ${{ github.event.inputs.k8s-cluster-name }} \
          	--region ${{ github.event.inputs.k8s-cluster-region }} \
            --version ${{ github.event.inputs.k8s-cluster-version }} \
            --size ${{ github.event.inputs.k8s-node-size }} \
            --count ${{ github.event.inputs.k8s-node-count }} \
            --1-clicks ingress-nginx,cert-manager
      -
        name: Annotate with cluster name
        run: |
          echo "::notice ::Cluster name: ${{ github.event.inputs.k8s-cluster-name }}"
      -
        name: Annotate with node IPs
        run: |
          K8S_NODE_IPS="$(
            kubectl get nodes --output jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}'
          )"
          echo "::notice ::Cluster node IPs: ${K8S_NODE_IPS}"
      -
        name: Create custom resources
        run: |
          kubectl create namespace production
  load-balancer:
    # TODO: only if ingress-nginx 1-click app installed
    needs: [k8s-cluster]
    runs-on: ubuntu-latest
    environment: DigitalOcean
    outputs:
      ip: ${{ steps.load-balancer.outputs.ip }}
    steps:
      -
        name: Restore cached doctl
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/doctl
          key: doctl-${{ vars.DOCTL_VERSION }}
      -
        name: Get kubeconfig from DigitalOcean
        run: |
          doctl auth init --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          doctl kubernetes cluster kubeconfig save ${{ github.event.inputs.k8s-cluster-name }}
          kubectl get nodes
      -
        name: Wait for ingress-nginx namespace
        run: |
          while [ -z "$(kubectl get namespace ingress-nginx --ignore-not-found 2>/dev/null)" ]; do
            sleep 5
          done
      -
        name: Wait for ingress-nginx/ingress-nginx-controller LoadBalancer
        run: |
          while [ -z "$(kubectl get service -n ingress-nginx ingress-nginx-controller --ignore-not-found -o jsonpath='{.status.loadBalancer.ingress}' 2>/dev/null)" ]; do
            sleep 5
          done
      -
        name: Get load balancer IP
        id: load-balancer
        run: |
          K8S_LOAD_BALANCER_IP="$(
            kubectl get services \
              -n ingress-nginx \
              ingress-nginx-controller \
              --output jsonpath='{.status.loadBalancer.ingress[0].ip}'
          )"
          if [ "${K8S_LOAD_BALANCER_IP}" = "" ]; then
            echo "Failed to get load balancer IP."
            exit 1
          fi
          echo "ip=${K8S_LOAD_BALANCER_IP}" >> $GITHUB_OUTPUT
      -
        name: Annotate with load balancer IP
        run: |
          echo "::notice ::Load balancer IP: ${{ steps.load-balancer.outputs.ip }}"
  dns-entry:
    needs: [load-balancer]
    runs-on: ubuntu-latest
    environment: Cloudflare
    env:
      K8S_LOAD_BALANCER_FQDN: do-k8s-${{ github.event.inputs.k8s-cluster-name }}.eanadev.org
    steps:
      -
        name: Create DNS entry on Cloudflare
        run: |
          curl --request POST \
            --url https://api.cloudflare.com/client/v4/zones/${{ vars.CLOUDFLARE_ZONE_ID }}/dns_records \
            --header 'Content-Type: application/json' \
            --header "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            --data '{
            "content": "'${{ needs.load-balancer.outputs.ip }}'",
            "name": "'${K8S_LOAD_BALANCER_FQDN}'",
            "type": "A",
            "ttl": 1
          }'
      -
        name: Annotate with load balancer FQDN
        run: |
          echo "::notice ::Load balancer FQDN: ${K8S_LOAD_BALANCER_FQDN}"
  rancher-import:
    needs: [k8s-cluster]
    runs-on: ubuntu-latest
    environment: DigitalOcean
    env:
      RANCHER_CLUSTER_NAME: do-${{ github.event.inputs.k8s-cluster-name }}
    steps:
      -
        name: Restore cached doctl
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/doctl
          key: doctl-${{ vars.DOCTL_VERSION }}
      -
        name: Get kubeconfig from DigitalOcean
        run: |
          doctl auth init --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          doctl kubernetes cluster kubeconfig save ${{ github.event.inputs.k8s-cluster-name }}
          kubectl get nodes
      -
        name: Install rancher CLI
        run: |
          wget --quiet https://github.com/rancher/cli/releases/download/v${{ vars.RANCHER_CLI_VERSION }}/rancher-linux-amd64-v${{ vars.RANCHER_CLI_VERSION }}.tar.gz
          tar xf rancher-linux-amd64-v${{ vars.RANCHER_CLI_VERSION }}.tar.gz
          mv rancher-v${{ vars.RANCHER_CLI_VERSION }}/rancher /usr/local/bin
          rancher --version
      -
        name: Login to Rancher
        run: |
          rancher login --token ${{ secrets.RANCHER_TOKEN }} --context ${{ vars.RANCHER_CONTEXT }} ${{ vars.RANCHER_URL }}
      -
        name: Import cluster into Rancher
        run: |
          rancher cluster create --import ${RANCHER_CLUSTER_NAME}
          rancher cluster import ${RANCHER_CLUSTER_NAME} --quiet | head -n 1 > ./rancher-import.sh
          sh rancher-import.sh
          rancer wait ${RANCHER_CLUSTER_NAME}
      -
        name: Annotate with Rancher admin URL
        run: |
          RANCHER_ADMIN_URL=$(rancher inspect --type cluster ${RANCHER_CLUSTER_NAME} | jq -Mr .id)
          echo "::notice ::Rancher admin URL: ${RANCHER_ADMIN_URL}"
