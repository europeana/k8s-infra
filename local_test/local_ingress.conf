<source>
    @type tail
    @id kubernetes.ingress.log
    tag kubernetes.ingress.*
    @label @ingress

#     path /var/log/containers/*kube-system_nginx-ingress*.log
#     pos_file /var/log/ingress.log.pos
    path ./dummy_logs/ingres*.txt
    pos_file ./result/kubernetes.ingress.log.pos
    read_from_head true

    <parse>
        @type multi_format         # Matches from top to bottom, so more-specific patterns should always come first

        # Normal access log format. Sadly we haven't found a way to make the regex multiple line :-(
        # The trailing ,?.* is so we can add new fields later without immediately breaking parsing
        <pattern>
            format regexp
            expression /^.*"time_date": "(?<time>\S+)",\s?"client": "(?<client-ipv4>\S*)",\s?"host": "(?<host>\S*)",\s?"scheme": "(?<scheme>https?)",\s?"request_method": "(?<request_method>[A-Z]*)",\s?"request_uri": "(?<request_uri>.*?)",\s?"args": "(?<args>\S*)",\s?"request_id": "(?<request_id>[0-9a-fA-F]*)",\s?"status": (?<status>\d{3}),\s?"upstream_addr": "(?<upstream_addr>\S*)",\s?"upstream_status": (?<upstream_status>(-1|0|\d{3})),\s?"request_time": (?<request_time>-?[\d\.]*),\s?"upstream_response_time": (?<upstream_response_time>-?[\d\.]*),\s?"upstream_connect_time": (?<upstream_connect_time>-?[\d\.]*),\s?"upstream_header_time": (?<upstream_header_time>-?[\d\.]*),\s?"user_agent": "(?<http_user_agent>.*?)",\s?"http_referrer": "(?<referrer>\S*)",\s?"body_bytes_sent": (?<body_bytes_sent>[\d\.]*),\s?"cf_connecting_ip": "(?<external_client_ip>\S*)",\s?"x_api_key": "(?<x_api_key>\S*)",\s?"authorization": "(?<authorization>.*?)",?.*}/
        </pattern>
        # Fallback (write everything in log field)
        <pattern>
            format regexp
            expression /^(?<log>.*)$/
        </pattern>
        time_key time
        # time field used by buffer when pushing logs to Elasticsearch
        keep_time_key true
        time_format %Y-%m-%dT%H:%M:%S%:z
        types status:integer,upstream_status:integer,request_time:float,upstream_connect_time:float,upstream_header_time:float,upstream_response_time:float,body_bytes_sent:integer
    </parse>
</source>

<label @ingress>

    # Filter out logs that have a host name containing the provided regex pattern
    # WARNING! If the EXCLUDE_HOST_REGEX variable isn't set then everything will be filtered by the grep plugin!!
#     <filter kubernetes.ingress.**>
#         @type grep
#         @id id_grep.fluentd_ingress
#         <exclude>
#             key host
#             pattern "#{ENV['EXCLUDE_HOST_REGEX']}"
#         </exclude>
#     </filter>

    # Add default output settings for all ingress logs
    <filter kubernetes.ingress.**>
        @type record_transformer
        @id ingress_add_default_type
        <record>
            fluentd_type ingress
            europeana_cluster "#{ENV['EANA_K8S_CLUSTER']}"
        </record>
    </filter>

    # Re-tag events that do not have proper format
    <match kubernetes.ingress.**>
        @type rewrite_tag_filter
        @id ingress_retag_unparsable
        @log_level trace
        <rule>
            key log
            pattern /^.+$/
            tag unparsable.${tag}
        </rule>
        # Not sure why, but if we don't retag the items that are parsed properly, then we lose them.
        <rule>
            key log
            pattern /^.+$/
            invert true
            tag parsed.${tag}
        </rule>
    </match>

    # Send unparsable items to different index
    <filter unparsable.**>
        @type record_transformer
        @id ingress_add_unparsable_type
        <record>
            fluentd_type unparsable
        </record>
    </filter>

    <filter parsed.**>
        @type jwt
        token_key authorization
        skip_basic_token true
        <record>
            client_key   payload.azp
            client_id    payload.client_public_id
            user_id      payload.sub
            session_id   payload.sid
        </record>
    </filter>

    # Add additional fields to parsed logs
    <filter parsed.**>
        @type record_transformer
        @id ingress_record_processing
        enable_ruby
        <record>
            # Either use external_client_ip if it exists already, or copy over client-ipv4 value
            external_client_ip ${if record["external_client_ip"].empty? then record["client-ipv4"] else record["external_client_ip"] end}
            # Extract wskey value if it exists (legacy field)
            wskey ${record["args"][/.*wskey=([^&]*)/,1]}
            # If we got a client_key from jwt then keep that, else copy over from x_api_key, or else from wskey parameter
            client_key ${if (record["client_key"].nil? || record["client_key"].empty?) then record["x_api_key"] else record["client_key"] end}
        </record>
        # always remove the authorization and x_api_key fields to reduce data sent to elastic
        remove_keys authorization,x_api_key
    </filter>
    # TODO for some reason doing 2 client_key modifications in 1 filter doesn't work properly
    <filter parsed.**>
        @type record_transformer
        @id ingress_record_processing2
        enable_ruby
        <record>
             client_key ${if (record["client_key"].nil? || record["client_key"].empty?) then record["wskey"] else record["client_key"] end}
        </record>
    </filter>

# Disabled for now because we didn't manage to get it working locally
#     <filter parsed.**>
#         @type geoip
#         geoip_lookup_keys client-ipv4
#         backend_library geoip2_c
#         # db path only valid in europeana/fluentd image
#         geoip2_database "/usr/share/geoip/GeoLite2-City.mmdb"
#         <record>
#             city_name       ${city.names.en["client-ipv4"]}
#             latitude        ${location.latitude["client-ipv4"]}
#             longitude       ${location.longitude["client-ipv4"]}
#             country_code    ${country.iso_code["client-ipv4"]}
#             country_name    ${country.names.en["client-ipv4"]}
#             postal_code     ${postal.code["client-ipv4"]}
#             region_code     ${subdivisions.0.iso_code["client-ipv4"]}
#             region_name     ${subdivisions.0.names.en["client-ipv4"]}
#             skip_adding_null_record  true
#         </record>
#     </filter>

    # Send everything to @output
    <match **>
        @type relabel
        @label @output
    </match>

</label>
